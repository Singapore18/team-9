glm.pred <- rep("Down",length(glm.prob))
glm.pred[glm.prob>0.5]="Up"
glm.pred=="Up"
sum(glm.pred=="Up")
sum(glm.pred=="Down")
table(glm.pred,Weekly$Direction)
train <- (Year >= 1990 & Year <= 2008)
train_data <- Weekly[train,]
test_data <- Weekly[!train,]
library(ISLR)
Weekly = Weekly
attach(Weekly)
set.seed(45102018)
train <- (Year >= 1990 & Year <= 2008)
train_data <- Weekly[train,]
test_data <- Weekly[!train,]
nrow(train_data)
nrow(test_data
)
glm.lag2 <- glm(Direction~Lag2,data=train_data,family=binomial)
summary(glm.lag2)
glm.lag2.prob <- predict(glm.lag2,type='response',newdata=test_data)
glm.lag2.pred <- rep("Down",length(glm.lag2.prob))
glm.lag2.pred[glm.lag2.prob>0.5] <- "Up"
# Testing on test data
table(glm.lag2.pred,test_data$Direction)
table(glm.pred,Weekly$Direction)
train <- (Year >= 1990 & Year <= 2008)
train_data <- Weekly[train,]
test_data <- Weekly[!train,]
glm.lag2 <- glm(Direction~Lag2,data=train_data,family=binomial)
summary(glm.lag2)
glm.lag2.prob <- predict(glm.lag2,type='response',newdata=test_data)
glm.lag2.pred <- rep("Down",length(glm.lag2.prob))
glm.lag2.pred[glm.lag2.prob>0.5] <- "Up"
# Testing on test data
table(glm.lag2.pred,test_data$Direction)
train.Direction <- Direction[train]
test.Direction <- Direction[!train]
train.X <- Lag2[train]
test.X <- Lag2[!train]
knn.pred <- knn(data.frame(train.X),data.frame(test.X),cl= train.Direction,k=3)
table(knn.pred,test.Direction)
mean(knn.pred==test.Direction)
#3d
library(class)
mean(knn.pred==test.Direction)
knn.pred <- knn(data.frame(train.X),data.frame(test.X),cl= train.Direction,k=3)
table(knn.pred,test.Direction)
mean(knn.pred==test.Direction)
set.seed(4510208)
set.seed(45102018)
knn.pred <- knn(data.frame(train.X),data.frame(test.X),cl= train.Direction,k=3)
table(knn.pred,test.Direction)
mean(knn.pred==test.Direction)
################################
new <- read.csv("C:/Users/Qi Ling/Desktop/new.csv")
View(new)
attach(new)
attach(new)
cor(Sales,CompetitionDistance)
model <- lm(Sales~CompetitionDistance,CompetitionOpenSinceMonth,CompetitionOpenSinceYear,Customers, DayOfWeek, Open, Promo, Promo2)
model <- lm(Sales~CompetitionDistance+CompetitionOpenSinceMonth+CompetitionOpenSinceYear+Customer+DayOfWeek+Prom+Promo2,data = new)
model <- lm(Sales~CompetitionDistance+CompetitionOpenSinceMonth+CompetitionOpenSinceYear+Customers+DayOfWeek+Prom+Promo2,data = new)
model <- lm(Sales~CompetitionDistance+CompetitionOpenSinceMonth+CompetitionOpenSinceYear+Customers+DayOfWeek+Promo+Promo2,data = new)
summary(model)
model <- lm(Sales~Assortment+CompetitionDistance+CompetitionOpenSinceMonth+CompetitionOpenSinceYear+Customers+DayOfWeek+Promo+Promo2,data = new)
summary(model)
model <- lm(Sales~StateHoliday+SchoolHoliday+Assortment+CompetitionDistance+CompetitionOpenSinceMonth+CompetitionOpenSinceYear+Customers+DayOfWeek+Promo+Promo2,data = new)
summary(model)
sample(3,10)
sample(10,3)
new.train <- sample(nrow(new),0.7*nrow(new))
attach(new.train)
train <- sample(nrow(new),0.7*nrow(new))
new.train <- new[train,]
attach(new.train)
model <- lm(Sales~StateHoliday+SchoolHoliday+Assortment+CompetitionDistance+CompetitionOpenSinceMonth+CompetitionOpenSinceYear+Customers+DayOfWeek+Promo+Promo2,data = new)
summary(model)
model <- lm(Sales~StateHoliday+SchoolHoliday+Assortment+CompetitionDistance+CompetitionOpenSinceMonth+CompetitionOpenSinceYear+Customers+DayOfWeek+Promo,data = new)
summary(model)
model <- lm(Sales~StateHoliday+SchoolHoliday+Assortment+CompetitionDistance+CompetitionOpenSinceMonth+CompetitionOpenSinceYear+Customers+DayOfWeek+Promo,data = new.train)
summary(model)
p <- ggplot(a_sales,aes(x=a_sales$DayOfWeek,y=a_sales$Sales))+geom_boxplot()
p + coord_flip()
# sort the sales data according to day
library(ggplot2)
a_sales <- new[new$Assortment=="a",]
a_sales$DayOfWeek <- as.factor(a_sales$DayOfWeek)
attach(a_sales)
# boxplot
p <- ggplot(a_sales,aes(x=a_sales$DayOfWeek,y=a_sales$Sales))+geom_boxplot()
p + coord_flip()
c_sales <- new[new$Assortment=="c",]
attach(c_sales)
# boxplot for c_type
q <- ggplot(c_sales,aes(x=c_sales$DayOfWeek, y=a_sales$Sales))+geom_boxplot()
q+coord_flip()
# boxplot for c_type
q <- ggplot(c_sales,aes(x=c_sales$DayOfWeek, y=c_sales$Sales))+geom_boxplot()
q+coord_flip()
c_sales$DayOfWeek <- as.factor(c_sales$DayOfWeek)
attach(c_sales)
q <- ggplot(c_sales,aes(x=c_sales$DayOfWeek, y=c_sales$Sales))+geom_boxplot()
q+coord_flip()
library(lubridate)
month(as.POSIXlt(a_sales$Date,format="%d/%m/%Y"))
month_a_sales <- month(as.POSIXlt(a_sales$Date,format="%d/%m/%Y"))
a_sales <- cbind(month_a_sales,a_sales)
# extracting sales from january and february
library(dplyr)
View(a_Sales)
View(a_sales)
month_a_sales <- month(as.POSIXlt(a_sales$Date,format="%d/%m/%Y"))
a_sales <- cbind(month_a_sales,a_sales)
View(a_sales)
# extracting sales from january and february
library(dplyr)
attach(a_sales)
janfeb_a_sales <- filter(a_sales, month_a_sales == 1 | month_a_sales==2)
a_sales <- subset(a_sales, select=-1)
View(a_sales)
janfeb_a_sales <- filter(a_sales, month_a_sales == 1 | month_a_sales==2)
ggplot(janfeb_a_sales,aes(x=a_sales$Date,y=a_sales$Sales))
ggplot(janfeb_a_sales,aes(x=a_sales$Date,y=a_sales$Sales))+geom_point()
ggplot(janfeb_a_sales,aes(x=janfeb_a_sales$Date,y=janfeb_a_sales$Sales))+geom_point()
ggplot(janfeb_a_sales,aes(x=janfeb_a_sales$Date,y=janfeb_a_sales$Sales))+geom_boxplot()
ggplot(janfeb_a_sales,aes(x=janfeb_a_sales$month_a_sales,y=janfeb_a_sales$Sales))+geom_boxplot()
?aes
ggplot(janfeb_a_sales,aes(group=janfeb_a_sales$month_a_sales, x=janfeb_a_sales$Date,y=janfeb_a_sales$Sales))+geom_boxplot()
jan_a_sales <- filter(janfeb_a_sales, month_a_sales == 1)
feb_a_sales <- janfeb_a_sales[-jan_a_sales]
feb_a_sales <- janfeb_a_sales[-jan_a_sales,]
feb_a_sales <- filter(janfeb_a_sales, month_a_sales==2)
t.test(jan_a_sales$Sales,feb_a_sales$Sales)
# Assigning +1 and -1 to stateholidays
View(new)
a_sales <- a_sales[order(a_sales$Date),]
View(a_sales)
View(new)
View(a_sales)
# Extract out indices on state holiday
ind <- which(a_sales$StateHoliday==1)
a_sales <- a_sales[order(a_sales$X),]
a_sales <- a_sales[order(a_sales$Date),]
a_sales <- a_sales[order(a_sales$Date),]
a_sales <- a_sales[order(a_sales$X),]
a_sales
a_sales <- a_sales[,-a_sales$Promo2]
a_sales <- a_sales[,-a_sales$Promo2SinceWeek]
View(a_sales)
a_sales <- a_sales[,-a_sales$Promo2]
a_sales <- a_sales[,-a_sales$Promo2SinceWeek]
View(a_sales)
rm(list = ls())
store<-read.csv("store.csv",header=T)
store<-na.omit(store)
train<-read.csv("train.csv",header=T)
new<-merge(train,store)
new<-new[new$Sales>0,]
new$Open<-NULL
attach(new)
new<-new[order(Date),]
new$Competition<-NA
attach(new)
year<-substring(Date,1,4)
month<-substring(Date,6,7)
new$Competition[which(year!=CompetitionOpenSinceYear)]=(year>CompetitionOpenSinceYear)
new$Competition[which(year==CompetitionOpenSinceYear)]=(month[which(year==CompetitionOpenSinceYear)]>CompetitionOpenSinceMonth)
new$Competition<-as.numeric(new$Competition)
new$CompetitionOpenSinceYear<-NULL
new$CompetitionOpenSinceMonth<-NULL
new$Promo2started<-NA
new$StateHoliday<-(new$StateHoliday!=0)
new$StateHoliday<-as.numeric(new$StateHoliday)
attach(new)
promostartdate<-as.Date(paste(new$Promo2SinceYear, new$Promo2SinceWeek, 1, sep="-"), "%Y-%U-%u")
promoyear<-substring(promostartdate,1,4)
promomonth<-substring(promostartdate,6,7)
new$Promo2started[which(year!=promoyear)]=(year>promoyear)
new$Promo2started[which(year==promoyear)]=(month[which(year==promoyear)]>promomonth)
new$Promo2started<-as.numeric(new$Promo2started)
new$Promo2SinceWeek<-NULL
new$Promo2SinceYear<-NULL
new$Customers<-NULL
new$Promo2<-NULL
new<-new[order(new$Store),]
a<-which(new$StateHoliday==1)
before<-a-1
after<-a+1
new$StateHoliday[before]<-2
new$StateHoliday[after]<-2
##splitting into assortments
anew=new[new$Assortment=="a",]
cnew=new[new$Assortment=="c",]
store<-read.csv("C:/Users/Qi Ling/Desktop/store.csv",header=T)
store<-na.omit(store)
train<-read.csv("C:/Users/Qi Ling/Desktop/train.csv",header=T)
train<-read.csv("C:/Users/Qi Ling/Desktop/cleantrain.csv",header=T)
new<-merge(train,store)
new<-new[new$Sales>0,]
new$Open<-NULL
attach(new)
new<-new[order(Date),]
new$Competition<-NA
attach(new)
year<-substring(Date,1,4)
month<-substring(Date,6,7)
new$Competition[which(year!=CompetitionOpenSinceYear)]=(year>CompetitionOpenSinceYear)
new$Competition[which(year==CompetitionOpenSinceYear)]=(month[which(year==CompetitionOpenSinceYear)]>CompetitionOpenSinceMonth)
new$Competition<-as.numeric(new$Competition)
new$CompetitionOpenSinceYear<-NULL
new$CompetitionOpenSinceMonth<-NULL
new$Promo2started<-NA
new$StateHoliday<-(new$StateHoliday!=0)
new$StateHoliday<-as.numeric(new$StateHoliday)
attach(new)
promostartdate<-as.Date(paste(new$Promo2SinceYear, new$Promo2SinceWeek, 1, sep="-"), "%Y-%U-%u")
promoyear<-substring(promostartdate,1,4)
promomonth<-substring(promostartdate,6,7)
new$Promo2started[which(year!=promoyear)]=(year>promoyear)
new$Promo2started[which(year==promoyear)]=(month[which(year==promoyear)]>promomonth)
new$Promo2started<-as.numeric(new$Promo2started)
new$Promo2SinceWeek<-NULL
new$Promo2SinceYear<-NULL
new$Customers<-NULL
new$Promo2<-NULL
new<-new[order(new$Store),]
a<-which(new$StateHoliday==1)
before<-a-1
after<-a+1
new$StateHoliday[before]<-2
new$StateHoliday[after]<-2
##splitting into assortments
anew=new[new$Assortment=="a",]
cnew=new[new$Assortment=="c",]
inflation14 <- 0.01135
inflation15 <- 0.8515/100
library(dplyr)
View(anew)
library(lubridate)
year <- year(as.POSIXlt(anew$Date,format="%d/%m/%Y"))
anew <- cbind(year,anew)
View(anew)
anew %>%
filter(anew$year==2014) %>%
anew$Sales <- anew$Sales/(1+inflation14)
# applying the inflation filter to sales in 2014
anew %>%
filter(anew$year==2014) %>%
anew$Sales/(1+inflation14)
anew %>%
filter(anew$year==2014) %>%
anew$Sales/(1+inflation14)
# applying the inflation filter to sales in 2014
anew$Sales %>%
filter(anew$year==2014) %>%
anew$Sales/(1+inflation14)
# applying the inflation filter to sales in 2014
anew %>%
filter(anew$year==2014) %>%
anew$Sales/(1+inflation14)
anew %>%
filter(anew$year==2014) %>%
anew$Sales/(1+inflation14)
attach(anew)
# applying the inflation filter to sales in 2014
anew %>%
filter(year==2014) %>%
anew$Sales/(1+inflation14)
# applying the inflation filter to sales in 2014
anew %>%
filter(year==2014) %>%
Sales/(1+inflation14)
anew <- cbind(year,anew)
attach(anew)
anew<- anew[,-1]
View(anew)
attach(anew)
# applying the inflation filter to sales in 2014
anew %>%
filter(year==2014) %>%
Sales/(1+inflation14)
# applying the inflation filter to sales in 2014
anew %>%
filter(year==2014) %>%
Sales/(1+inflation14)
# applying the inflation filter to sales in 2014
anew %>%
filter(year==2014)
# applying the inflation filter to sales in 2014
anew$Sales[year==2014] <- anew$Sales/(1+inflation14)
# applying the inflation filter to sales in 2014
anew$Sales[year==2014] <- anew$Sales[year==2014]/(1+inflation14)
anew$Sales[year==2015] <- anew$Sales[year==2015]/(1+inflation15)
attach(anew)
train <- sample(nrow(anew),0.7*nrow(anew))
anew_train <- anew[train,]
anew_test <- anew[-train,]
unique(anew$Store)
length(unique(anew$Store))
lm.model <- lm(Sales ~ Date + Promo + StateHoliday + SchoolHoliday+StoreType+CompetitionDistance,data=anew_train)
lm.model <- lm(Sales ~ Promo + StateHoliday + SchoolHoliday+StoreType+CompetitionDistance,data=anew_train)
summary(lm.model)
new_NN <- nnet(category~.,data=new.train,size=50,MaxNWts=10000)
library(nnet)
## try neural network
ideal <- class.ind(new$category)
?nnet
rm(list = ls())
store<-read.csv("C:/Users/Qi Ling/Desktop/store.csv",header=T)
store<-na.omit(store)
train<-read.csv("C:/Users/Qi Ling/Desktop/cleantrain.csv",header=T)
new<-merge(train,store)
new<-new[new$Sales>0,]
new$Open<-NULL
attach(new)
new<-new[order(Date),]
new$Competition<-NA
attach(new)
year<-substring(Date,1,4)
month<-substring(Date,6,7)
new$Competition[which(year!=CompetitionOpenSinceYear)]=(year>CompetitionOpenSinceYear)
new$Competition[which(year==CompetitionOpenSinceYear)]=(month[which(year==CompetitionOpenSinceYear)]>CompetitionOpenSinceMonth)
new$Competition<-as.numeric(new$Competition)
new$CompetitionOpenSinceYear<-NULL
new$CompetitionOpenSinceMonth<-NULL
new$Promo2started<-NA
new$StateHoliday<-(new$StateHoliday!=0)
new$StateHoliday<-as.numeric(new$StateHoliday)
attach(new)
promostartdate<-as.Date(paste(new$Promo2SinceYear, new$Promo2SinceWeek, 1, sep="-"), "%Y-%U-%u")
promoyear<-substring(promostartdate,1,4)
promomonth<-substring(promostartdate,6,7)
new$Promo2started[which(year!=promoyear)]=(year>promoyear)
new$Promo2started[which(year==promoyear)]=(month[which(year==promoyear)]>promomonth)
new$Promo2started<-as.numeric(new$Promo2started)
new$Promo2SinceWeek<-NULL
new$Promo2SinceYear<-NULL
new$Customers<-NULL
new$Promo2<-NULL
new<-new[order(new$Store),]
a<-which(new$StateHoliday==1)
before<-a-1
after<-a+1
new$StateHoliday[before]<-2
new$StateHoliday[after]<-2
#inflation
inflation15<-1.135/100
inflation14<-0.8515/100
date1<-substring(Date,1,4)
new$Sales[date1==2014]<-round(new$Sales[date1==2014]/(inflation14+1))
new$Sales[date1==2015]<-round(new$Sales[date1==2015]/(inflation15+1))
new$MonthofYear<-NA
new$MonthofYear<-format(as.POSIXct(new$Date),"%B")
colnames(new)[which(names(new) == "Promo")] <- "Promo1"
colnames(new)[which(names(new) == "Promo2started")] <- "Promo2"
##binning
a<-new[new$Sales<5095,]
b<-new[5095<new$Sales&new$Sales<7168,]
c<-new[new$Sales>7166,]
new$category<-NA
new$category[new$Sales<5095]<-"Low"
new$category[5095<new$Sales&new$Sales<7168]<-"Medium"
new$category[new$Sales>7166]<-"High"
new$assortmenttype<-NA
new$assortmenttype[new$Assortment=="a"]<-0
new$assortmenttype[new$Assortment=="c"]<-1
new$Assortment<-NULL
##multilinear regression
model<-lm(Sales~MonthofYear+Promo1+StateHoliday+SchoolHoliday+Competition*CompetitionDistance+Promo2+StoreType+assortmenttype,data=new)
summary(model)
##logistic regression
set.seed(45102018)
train<- sample(nrow(new),0.7*nrow(new))
new.train<-new[train,]
new.test<-new[-train,]
attach(new.train)
library(nnet)
## try neural network
ideal <- class.ind(new$category)
View(new.train)
new_NN <- nnet(new.train,ideal,size=50,MaxNWts=10000)
new_NN <- nnet(ideal~.,data=new.train,size=50,MaxNWts=10000)
## try neural network
attach(new.train)
new_NN <- nnet(category~.,data=new.train,size=50,MaxNWts=10000)
new_NN <- nnet(category~.,data=new.train,size=50,MaxNWts=100000)
new_NN <- nnet(new.train$category~.,data=new.train,size=50,MaxNWts=100000)
new_NN <- nnet(new.train$category~.,data=new.train,size=50,MaxNWts=100000,na.action=na.omit)
new_NN <- nnet(new.train$Sales~.,data=new.train,size=50,MaxNWts=100000,na.action=na.omit)
new_NN <- nnet(Sales~.,data=new.train,size=50,MaxNWts=100000,na.action=na.omit)
train<- sample(nrow(new),0.3*nrow(new))
new.train<-new[train,]
new.test<-new[-train,]
new_NN <- nnet(Sales~.,data=new.train,size=50,MaxNWts=100000,na.action=na.omit)
new_NN <- nnet(Sales~.,data=new.train,size=10,MaxNWts=100000,na.action=na.omit)
train<- sample(nrow(new),0.7*nrow(new))
new.train<-new[train,]
new.test<-new[-train,]
attach(new.train)
new_NN <- nnet(Sales~.,data=new.train,size=8,MaxNWts=100000,na.action=na.omit)
new_NN <- nnet(Sales~.,data=new.train,size=10,MaxNWts=100000,na.action=na.omit)
new_NN <- nnet(Sales~.,data=new.train,size=10,MaxNWts=1000,na.action=na.omit)
train<- sample(nrow(new),0.5*nrow(new))
new.train<-new[train,]
attach(new.train)
new_NN <- nnet(Sales~.,data=new.train,size=10,MaxNWts=10000,na.action=na.omit)
new_NN$value
new_NN.pred <- predict(new_NN,new.test)
sum((new_NN.pred-new.test$Sales)^2)
shiny::runApp('codeforgood')
library(mongolite)
install.packages("mongolite")
install.packages("flexdashboard")
library(flexdashboard)
install.packages("rmarkdown", type = "source")
install.packages("rmarkdown", type = "source")
# save data and do some cleaning
scoredata <- read_excel("C:/Users/Qi Ling/Desktop/jpm-clean.xlsx")
# save data and do some cleaning
library(readxl)
scoredata <- read_excel("C:/Users/Qi Ling/Desktop/jpm-clean.xlsx")
scoredata$race <- as.factor(scoredata$race)
# save data and do some cleaning
library(readxl)
scoredata <- read_excel("C:/Users/Qi Ling/Desktop/jpm-clean.xlsx")
scoredata <- scoredata[,c(1:9,118:123)]
View(scoredata)
names(scoredata) <- c("userid","dob","age","gen","race","religion","income","district","edu","g","c","s","t","p","workshopid")
scoredata$race <- as.factor(scoredata$race)
scoredata$gen <- as.factor(scoredata$gen)
scoredata$income <- as.factor(scoredata$income)
scoredata$edu <- as.factor(scoredata$edu)
levels(scoredata$race)
shiny::runApp('codeforgood')
?selectInput
?selectizeInput
runApp('codeforgood')
attach(scoredata)
scoredata <- read_excel("C:/Users/Qi Ling/Desktop/jpm-clean.xlsx")
scoredata <- scoredata[,c(1:9,118:123)]
names(scoredata) <- c("userid","dob","age","gen","race","religion","income","district","edu","g","c","s","t","p","workshopid")
scoredata$race <- as.factor(scoredata$race)
scoredata$gen <- as.factor(scoredata$gen)
scoredata$income <- as.factor(scoredata$income)
scoredata$edu <- as.factor(scoredata$edu)
attach(scoredata)
runApp('codeforgood')
runApp('codeforgood')
?output
summary(g)
###########  THIS IS FOR MAIN DEMOGRAPHIC ##############
g <- input$response
runApp('codeforgood')
runApp('codeforgood')
runApp('codeforgood')
runApp('codeforgood')
runApp('codeforgood')
runApp('codeforgood')
?mainPanel
runApp('codeforgood')
runApp('codeforgood')
runApp('codeforgood')
?renderDataTable
runApp('codeforgood')
runApp('codeforgood')
runApp('codeforgood')
runApp('codeforgood')
runApp('codeforgood')
runApp('codeforgood')
runApp('codeforgood')
runApp('codeforgood')
runApp('codeforgood')
runApp('codeforgood')
runApp('codeforgood')
runApp('codeforgood')
plot(scoredata$g~female)
scoredata <- read_excel("C:/Users/Qi Ling/Desktop/jpm-clean.xlsx")
plot(scoredata$g~female)
plot(scoredata$g[female])
scoredata <- scoredata[,c(1:9,118:123)]
names(scoredata) <- c("userid","dob","age","gen","race","religion","income","district","edu","g","c","s","t","p","workshopid")
plot(scoredata$g[female])
plot(scoredata$g[Female])
?ggplot
?geom_boxplot
?boxplot
?geom_boxplot
runApp('codeforgood')
runApp('codeforgood')
runApp('codeforgood')
runApp('codeforgood')
runApp('codeforgood')
runApp('codeforgood')
runApp('codeforgood')
library(ggplot2)
runApp('codeforgood')
runApp('codeforgood')
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
runApp('codeforgood')
runApp('codeforgood')
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
runApp('codeforgood')
runApp('codeforgood')
install.packages("mongolite")
shiny::runApp()
runApp()
